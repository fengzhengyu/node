
// js数据类型分为基本数据类型与引用数据类型
 基本数据类型：number string boolean null undefined
 引用数据类型：
  object: {},[],/^$/,date
  function
 区别：基本数据类型操作的是值，引用数据类型操作的是地址；
 例如：（看全局作用域解析图）
    var num=12；
    var obj= {name:'fengzheng',age:28};
    function fn(){
        console.log('dd')
    }
    console.log(fn) //输出函数本身
    console.log(fn()) //输出当前函数返回值，默认undefined 有return，就是return后面的 
//1、 当浏览器加载HTML的时候，会提供一个供全局js代码执行的环境->全局作用域（global/window）
//2、 预解释
 在当前作用域中，js代码执行之前，浏览器会默认把所有带var 和function的进行提前的声明或者定义
 1）理解声明预定义：
  例如：var num=12
  声明：declare   var num ->告诉浏览器所在的全局作用域中有个num的变量了,默认值是undefined
  定义: defined   num =12 ->给变量进行赋值
 2）对于var和function在预解释的时候操作还是不一样的  
  var ->在预解释的时候，只是提前声明
  function -> function在预解释的时候，声明+定义都完成了
 3)预解释只发生在当前作用域下，例如：开始只在window下的进行预解释，只有执行函数的时候才会对函数进行预解释

  例如：（看预解释解析图）
    var num=12；
    var obj= {name:'fengzheng',age:28};
    function fn(num1,num2){
        var total = num1+num2;
        console.log(total)
    }
//3、js的内存分类：
 栈内存： 用来提供一个供js代码执行的环境 -》作用域（全局作用域、私有作用域）
 堆内存： 用来存储引用数据类型的值，-》对象储存是属性与值，函数存储的是代码字符串    

综合练习
    如何区分全局变量与私有变量？
     在全局作用域下声明（预解释的时候）的变量就是全局变量；
     在“私有作用域中声明的变量”和“函数的形参”都是私有变量；
     在私有作用域中，代码执行的时候遇见一个变量，首先确认它是否是私有变量，如果是，跟外面的没有任何关系，
    如果不是私有，则在当前作用域的上级作用域进行查找，如果上级作用域也没，继续往上查找，直到找到window为止
    ----这就是我们所有的作用域链
    console.log(total);
    var total = 0;
    //当函数执行时，让函数体内的代码执行，并形成新的私有作用域
   
    function fn(num1,num2){
        //1）有过有形参，先给形参传值，
        //2）进行私有作用域预解释
        //3) 私有作用域代码从上到下执行
        //4) 
        console.log(total);
        var total = num1+ num2;
        console.log(total);
    }
    fn(100,200) //当函数执行时，让函数体内的代码执行，并形成新的私有作用域
    console.log(total); 

//有var 与没var 的区别
 var num=12；
 console.log(num)   //->12  
 num1 = 12
 console.log(num1)   //->12 相当输出是 window.num1
 区别：num1 ，相当于给window增加了一个叫num2的属性名，属性值是12；
       num,首先相当于给全局作用域增加了一个全局变量num，但是不仅如此，还相当于给window增加了一个叫num2的属性名，属性值是12；

//预解释与条件么有关系；函数表达式，预解释只解释 = 左边的的变量；自运行函数在全局作用域不进行预解释，当代码执行到这个地方的时候，定义和执行一起完成了

//函数名与变量名重复，只声明一次
    //第一步：声明+定义 fn = xxxfff111
    //第二步：声明 var fn; (不需要重新声明)
    //第三步 声明(不重复进行)+定义 fn=xxxfff222
    fn() //->2
    function fn(){console.log(1)}
    fn()//->2
    var fn =10;
    fn()//->fn is not a function 报错
    function fn(){console.log(2)}
    fn()